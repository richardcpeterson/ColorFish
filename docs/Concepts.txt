Important Concepts in CSSchemer
===============================

This document explains the core concepts at work in the code behind
CSSchemer.  The intent is to help developers who are new to the
project gain an understanding of how the system is pieced together, so
that they can quickly and easily determine where to begin working.

Prerequisite References
-----------------------

Quick access to these references is invaluable for working on
CSSchemer.

    . https://developer.mozilla.org/en/XUL[Mozilla XUL Reference]

    . http://www.w3.org/TR/DOM-Level-2-Style/css.html[Document Object
    Model CSS]



Debugging Tips
--------------

When testing code, first make sure the file
+defaults/preferences/prefs.js+ contains the following:

----------------------------------------------------------------------
pref("nglayout.debug.disable_xul_cache", true);
pref("nglayout.debug.disable_xul_fastload", true);

pref("javascript.options.showInConsole", true);
pref("javascript.options.strict", true);

pref("browser.dom.window.dump.enabled", true);
pref("browser.cache.disk.enable", false);
----------------------------------------------------------------------

The first set of options disables caching so that you can be sure all
changes are having effect.  The second and third sets of options
enable the use of the +-jsconsole+ and +-console+ command-line flags,
respectively.  The first flag opens up a debugging window which will
display Javascript errors in real-time.  The second one allows the
function +dump()+ to send output to the terminal.

You can use +dump()+ for sending test strings to the terminal, but if
you want to dump the contents of an object you can use +dumpProps()+,
which is a method available on all objects.  See the definition in
+chrome/scripts/init.js+ for more details.



Initialization
--------------

The entry point to CSSchemer is the function +initApp()+, defined in
the +chrome/scripts/init.js+ file.  This file is the first code loaded
on start up, and that function in particular is executed when the
program starts; specifically, it is the +onload+ attribute of the XUL
+<window>+ that is the application itself.

The +initApp()+ function serves a few purposes.

    . It extends any prototypes with functions that we use throughout
    the program.  It serves as a collection of all global utility
    methods we define on common objects like String and Array.

    . It creates all global objects used by the application.  In
    particular:

        .. A global +Browser+ object.

        .. A global +CSApplication+ object.

    . It kicks off the program by loading the start-up page inside of
    the browser.



How CSSchemer Loads Stylesheets
-------------------------------

----------------------------------------------------------------------
    CSApplication                   <browser>
        |                               |
        |                               |
        |                               |
        |                               V
        ---- activePage = new Page( contentDocument )
                               |
                               |
                               |
                               V
                         styleSheets = contentDocument.styleSheets
                               |
                               |
                               |
                               V
           [ csStyleSheet, csStyleSheet, csStyleSheet, ... ]
----------------------------------------------------------------------

Everything begins in +CSApplication+.  The +chrome/scripts/init.js+
code creates a global instance of this class, called +csApp+.  When
the user browses to a page the +csApp+ stores that page as the
+activePage+, which is a member of +CSApplication+.  The function
+update_active_page()+ is responsible for updating the active page
when the user browsers somewhere.

The +update_active_page()+ function takes the +contentDocument+ from
the browser and passes it into a new +Page+ object.  That +Page+
object, in turn, wraps the +contentDocument+ in a new instance of
+csDocument+.  This happens _before_ we get the stylesheets.

This happens because +csDocument+ provides a method called
+LoadStyleSheets()+, which runs through all of the stylesheet
references in the given document and builds an array of +csStyleSheet+
objects to represent them all.  That array is stored in
+csDocument.styleSheets+.  The +Page+ class also has a +styleSheets+
attribute which is assigned to +csDocument.styleSheets+ after we have
loaded them all.

That gives +Page+ direct access to the stylesheets, and since +csApp+
stores a +Page+ object as the +activePage+, we can use
+activePage.styleSheets+ in the +csApp+ code to access the array of
sheets for the current page.
