<?xml version="1.0"?>
<bindings
  xmlns="http://www.mozilla.org/xbl"
  xmlns:xbl="http://www.mozilla.org/xbl"
     xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
>


<binding id="swatchControl">
    <content>
        <xul:hbox
            anonid="container">
            <xul:box
                align="center"
                pack="center"
                anonid="selectionBox"
                class="swatchSelectionBox"
                orient="vertical">
                <xul:box
                    anonid="newColor"
                    class="colorSwatch">
                </xul:box>
            </xul:box>
        </xul:hbox>
    </content>

    <implementation>
        <constructor><![CDATA[
            //Parent element for the whole control
            this.newColorBox = document.getAnonymousElementByAttribute(this, "anonid", "newColor");
            this.selectionBox = document.getAnonymousElementByAttribute(this, "anonid", "selectionBox");

            //Relate the parent swatch control to each
            //element in a way that doesn't depend
            //on traversing the DOM
            this.newColorBox.swatchControl = this;

            //Add any "passed in" observers to the initial arrays of
            //mouse event observers
            this.mouseOverObservers = [].concat(this.originalMouseOverObservers);
            this.mouseOutObservers = [].concat(this.originalMouseOutObservers);

            this.setSwatch(this.originalSwatch);
        ]]></constructor>
        <method name="setSwatch">
            <parameter name="swatch"/>
            <body><![CDATA[
                //Unregister from any previous swatch
                if(this.swatch){
                    this.stopObserving(this.swatch)
                }

                this.swatch = swatch;

                //Register with the new swatch
                this.registerObservers(this.swatch);

                var toolTip = "Found in " + swatch.count() + " style rule"
                        + (swatch.count()==1?"":"s");
                this.setAttribute("tooltiptext", toolTip);


                //Set up the modified swatch color box
                this.newColorBox.setAttribute(
                    "style",
                    "background-color: " + swatch.color.getCSSHex());

                //Set up the input box
                this.updateControl();
            ]]></body>
        </method>

        <method name="updateControl">
            <body><![CDATA[
                if (!this.swatch || !this.swatch.color){
                    return null;
                }

                this.updateColor(this.swatch.color)
            ]]>
            </body>
        </method>

        <method name="updateText">
            <body><![CDATA[
                if (!this.swatch || !this.swatch.color){
                    return null;
                }
            ]]>
            </body>
        </method>

        <method name="updateColor">
            <parameter name="color"/>
            <body><![CDATA[
                //The new color is different from the original color
                //Make the swatch the new background color
                this.newColorBox.setAttribute(
                    "style",
                    "background-color: " + color.getCSSHex());

            ]]>
            </body>
        </method>

        <method name="isSelected">
            <body><![CDATA[
                return this.swatch.isSelected();
            ]]>
            </body>
        </method>

        <method name="getSwatch">
            <body><![CDATA[
                return this.swatch;
            ]]>
            </body>
        </method>


        <method name="observe">
            <parameter name="swatch"/>
            <parameter name="topic"/>
            <parameter name="data"/>
            <body><![CDATA[
            dump("Observing\n");
                this.updateColor(swatch.liveEditColor);
            ]]>
            </body>
        </method>

        <method name="updateSwatchHistory">
            <parameter name="swatch"/>
            <body><![CDATA[
                this.updateColor(swatch.color);
            ]]>
            </body>
        </method>
        <method name="updateSelection">
            <parameter name="swatch"/>
            <body><![CDATA[
                if(swatch.isSelected()){
                    this.selectionBox.addClass("selected");
                }
                else{
                    this.selectionBox.removeClass("selected");
                }
            ]]>
            </body>
        </method>
        <method name="registerObservers">
            <parameter name="swatch"/>
            <body><![CDATA[
                //Register with the new swatch
                var control = this;
                let test = {
                    observe: function (s, t, d) {
                        s.QueryInterface(Components.interfaces.nsISupports);
                        s.dumpProps();
                        control.updateColor(d);
                    }
                };
                swatch.addLiveColorObserver(test);
                swatch.addHistoryObserver(this);
                swatch.addSelectionObserver(this);
            ]]>
            </body>
        </method>
        <method name="stopObserving">
            <parameter name="swatch"/>
            <body><![CDATA[
                //Un register with the swatch
                swatch.removeLiveColorObserver(this);
                swatch.removeHistoryObserver(this);
                swatch.removeSelectionObserver(this);
            ]]>
            </body>
        </method>
        <method name="destroy">
            <body><![CDATA[
                if(this.swatch){
                    this.stopObserving(this.swatch);
                }
                this.mouseOverObservers = [];
                this.mouseOutObservers = [];
            ]]>
            </body>
        </method>

        <!--Register an observer to be notified when this
            swatchControl has a mouseOver event.
            The observer must implement the
            notifySwatchMouseOver(swatchControl)
            meothod.
            -->
        <method name="addMouseOverObserver">
            <parameter name="observer" />
            <body><![CDATA[
                this.mouseOverObservers.push(observer);
            ]]>
            </body>
        </method>

        <method name="removeMouseOverObserver">
            <parameter name="observer" />
            <body><![CDATA[
                this.mouseOverObservers.remove(observer);
            ]]>
            </body>
        </method>

        <!--Register an observer to be notified when this
            swatchControl has a mouseOut event.
            The observer must implement the
            notifySwatchMouseOut(swatchControl)
            meothod.
            -->
        <method name="addMouseOutObserver">
            <parameter name="observer" />
            <body><![CDATA[
                this.mouseOutObservers.push(observer);
            ]]>
            </body>
        </method>

        <method name="removeMouseOutObserver">
            <parameter name="observer" />
            <body><![CDATA[
                this.mouseOutObservers.remove(observer);
            ]]>
            </body>
        </method>
    </implementation>

    <handlers>
        <handler event="mousedown" button="0" modifiers="none"><![CDATA[
            swatch.palette.deselectAllSwatches();
            swatch.select();
            event.stopPropagation();
        ]]>
        </handler>
        <handler event="mousedown" button="0" modifiers="accel"><![CDATA[
            swatch.reverseSelection();
            event.stopPropagation();
        ]]>
        </handler>
        <handler event="mousedown" button="0" modifiers="shift"><![CDATA[
            var startSwatch = swatch.palette.mostRecentlySelectedSwatch;
            if(startSwatch && startSwatch.isSelected()){
                swatch.palette.selectSwatchRange(startSwatch, swatch);
            }
            else{
                swatch.reverseSelection();
            }
            event.stopPropagation();
        ]]>
        </handler>

        <handler event="mouseover"><![CDATA[
            var control = this;

            //Figure out if we are mousing over this
            //element _from_ one of this element's child
            //nodes. event.relatedTarget tells us where
            //the cursor is coming from, and we don't
            //care about mouseover events in which the
            //cursor was over a child node, and enters
            //the main parent node. It creates all kinds
            //of duplicate mouseover events without
            //this.
            var origin = event.relatedTarget;
            while (origin) {
                if (origin == this){
                    break;
                }
                origin = origin.parentNode;
            }

            //If we are coming from somewhere else - AKA a "genuine"
            //mouseover event...
            if(origin != this){
                this.mousedOver = true;
                Array.forEach(this.mouseOverObservers, function(observer) {
                    observer.notifySwatchMouseOver(control);
                });

                //Class for each currently hovered swatch
                this.addClass("hover");
            }
        ]]>
        </handler>

        <handler event="mouseout"><![CDATA[
            var control = this;

            //event.relatedTarget gives us the
            //element that the cursor is going _to_.
            //We only care if the cursor goes to
            //something that is _not_ one of this
            //element's child nodes (that is, leaves
            //this node entirely). Thus we check to
            //see if the cursor is leaving the part
            //of the DOM heirarchy rooted at "this".
            //Without this check, we'd be catching all
            //kinds of mouseout events internal to this
            //node.
            var destination = event.relatedTarget;
            while (destination) {
                if (destination == this){
                    break;
                }
                destination = destination.parentNode;
            }

            //If we are really leaving this element
            if(destination != this){
                Array.forEach(this.mouseOutObservers, function(observer) {
                    observer.notifySwatchMouseOut(control);
                });
                this.removeClass("hover");
            }
        ]]>
        </handler>
    </handlers>
</binding>

<binding id="paletteControl">
    <content>
        <xul:hbox
            anonid="container">
            <xul:grid>
                <xul:columns
                    anonid="columnsTag">
                </xul:columns>
                <xul:rows
                    anonid="rowsTag">
                </xul:rows>
            </xul:grid>
        </xul:hbox>
    </content>

    <implementation>
        <constructor><![CDATA[
            //Parent element for the whole control
            this.container = document.getAnonymousElementByAttribute(this, "anonid", "container");
            this.columnsTag = document.getAnonymousElementByAttribute(this, "anonid", "columnsTag");
            this.rowsTag = document.getAnonymousElementByAttribute(this, "anonid", "rowsTag");

            this.columnCount = 16;
            this.setPalette(this.originalPalette);
        ]]></constructor>

        <method name="setPalette">
            <parameter name="palette"/>
            <body><![CDATA[
                //Clean up the old palette
                this.removeSwatchControls();
                this.createSwatchControls(palette.swatches);
                this.palette = palette;
                this.doLayout();
            ]]></body>
        </method>

        <!--Remove and destroy all swatch controls
            currently in this paletteControl-->
        <method name="removeSwatchControls">
            <body><![CDATA[
                if(this.swatchControls){
                    for(var i=0; i<this.swatchControls.length; i++){
                        this.swatchControls[i].destroy();
                    }
                }
                this.swatchControls = [];
            ]]>
            </body>
        </method>

        <!--Generate all the swatchControls for the
            given set of swatches, and save them in
            this.swatchControls.-->
        <method name="createSwatchControls">
            <parameter name="swatches"/>
            <body><![CDATA[
                this.swatchControls = [];
                for (var i=0; i < swatches.length; i++){
                    var swatchControl = window.document.createElement("swatchControl");

                    //The constructor for the swatch element has
                    //not yet been called. It only
                    //gets called when the stylesheet is read and
                    //the XBL binding is bound.  Thus we can't
                    //call any methods defined in the binding,
                    //like "setSwatch()", here.
                    //Instead, we do the following kluge to pass
                    //things to the constructor.
                    swatchControl.originalSwatch = swatches[i];
                    swatchControl.originalMouseOverObservers = [this];
                    swatchControl.originalMouseOutObservers = [this];
                    this.swatchControls.push(swatchControl);
                }
            ]]>
            </body>
        </method>

        <!--Set the number of columns that should
            be used to lay out this paletteControl.
            Update the GUI to reflect this change-->
        <method name="setColumnCount">
            <parameter name="count"/>
            <body><![CDATA[
                this.columnCount = count;
                this.doLayout();
            ]]>
            </body>
        </method>

        <!--Return the row index that a given swatch's
            swatch control is in-->
        <method name="getRowOf">
            <parameter name="swatch" />
            <body><![CDATA[
                var index = this.getIndexOfSwatch(swatch);
                return Math.floor(index/this.columnCount);
                    var col = i%this.columnCount;
            ]]>
            </body>
        </method>

        <!--Return the column index that a given swatch's
            swatch control is in-->
        <method name="getColumnOf">
            <parameter name="swatch" />
            <body><![CDATA[
                var index = this.getIndexOfSwatch(swatch);
                return index%this.columnCount;
            ]]>
            </body>
        </method>

        <!--Return the index into this.swatchControls
            that a partilar swatch's swatchControl is
            located at-->
        <method name="getIndexOfSwatch">
            <parameter name="swatch" />
            <body><![CDATA[
                var index = 0;
                while(index < this.swatchControls.length){
                    if(this.swatchControls[index].getSwatch() == swatch){
                        return index;
                    }
                    index++;
                }
                return -1;
            ]]>
            </body>
        </method>

        <!--Move a single selected swatch by the given
            vector, or not at all, if the vector produces
            an out of bounds result-->
        <method name="moveSingleSelection">
            <parameter name="rowVector" />
            <parameter name="colVector" />
            <body><![CDATA[
                var selectedSwatch = this.palette.getSelectedSwatches()[0];
                var row = this.getRowOf(selectedSwatch);
                var col = this.getColumnOf(selectedSwatch);

                //Move the indexes by the amount in the vectors
                row += rowVector;
                col += colVector;

                //Wrap around - kluge version

                if(col >= this.columnCount){
                    row++;
                }
                if(col < 0){
                    row--;
                }
                col %= this.columnCount;
                if (col < 0 && row >= 0){
                    col += this.columnCount;
                }

                //Make sure we don't have a bad index
                row = Math.min(Math.max(row,0),this.rowCount-1);
                col = Math.min(Math.max(col,0),this.columnCount-1);


                //Only move if there is a swatch to move to.
                //the last row is not always full.
                var index = ((row * this.columnCount) + col);

                if(index < this.swatchControls.length && index >= 0){
                    this.palette.deselectAllSwatches();
                    this.grid[row][col].getSwatch().select();
                }
            ]]>
            </body>
        </method>

        <!--Update the layout of this paletteControl
            to reflect any changes to the palette or
            other fields of this paletteControl.
            This is what sets up the swatches in a grid.-->
        <method name="doLayout">
            <body><![CDATA[
                var swatchCount = this.swatchControls.length;
                this.rowCount = Math.ceil(swatchCount/this.columnCount);

                this.columnsTag.removeAllChildren();
                this.rowsTag.removeAllChildren();

                //Add all the header column tags
                for(var i=0; i<this.columnsCount; i++){
                    this.columnsTag.appendChild(window.document.createElement("column"));
                }

                //Add all the row tags
                var rowElements = new Array(this.rowCount);
                for(var i=0; i<this.rowCount; i++){
                    rowElements[i] = window.document.createElement("row")
                    this.rowsTag.appendChild(rowElements[i]);
                }

                //Build the grid to contain the swatchControls
                //Model the grid in this.grid for easy
                //access to swatchControls by grid position
                this.grid = new Array(this.rowCount);
                for(var i=0; i<this.grid.length; i++){
                    this.grid[i] = new Array();
                }

                for(var i=0; i<swatchCount; i++){
                    var row = Math.floor(i/this.columnCount);
                    var col = i%this.columnCount;
                    this.grid[row][col] = this.swatchControls[i];
                    //Actually add the swatchControl to the XUL DOM
                    rowElements[row].appendChild(this.swatchControls[i]);
                }
            ]]></body>
        </method>

        <!--This is where we are notified by swatch
            controls that they have had a mouseOver
            event-->
        <method name="notifySwatchMouseOver">
            <parameter name="swatchControl" />
            <body><![CDATA[
                //So far we only care about mouseover
                //events on selected items
                if(swatchControl.isSelected()){
                    //Keep a reference to "this"
                    var paletteControl = this;

                    //We _just_ got this event. We're not stopping
                    //any animation yet.
                    paletteControl.resetAnimation = false;

                    //Recursive animate method that counts down
                    //to zero, progressing through a numeric sequence
                    //of class names that are applied at each animation
                    //step. These classes are applied to the whole
                    //paletteControl, and thus can affect child node
                    //styling via CSS rules.
                    function animate(iteration){
                        //If the animation hasn't been halted elsewhere
                        //and we'er not done
                        if(!paletteControl.resetAnimation
                           && iteration>0){
                            //Swap out the element's classes
                            var oldClass = "selectedHover"+iteration;
                            var newClass = "selectedHover"+(iteration-1);
                            paletteControl.removeClass(oldClass);
                            paletteControl.addClass(newClass);

                            //Call the next animation iteration
                            //Adjust the delay in milliseconds to speed
                            //up or slow down
                            setTimeout(
                                function(){animate(iteration-1);},
                                32);
                        }
                        else{
                            //The state of this paletteControl is
                            //a finished animatino sequence.
                            paletteControl.finishedAnimation = true;
                        }
                    }

                    //If we haven't already finished an animation,
                    //start the animation. We might have already finished
                    //an animation from mousing over a different selected
                    //swatch, and we don't want to replay the animation
                    //when moving from selected swatch to selected swatch
                    if(!paletteControl.finishedAnimation){
                        animate(4);
                    }
                }
            ]]>
            </body>
        </method>

        <!--This is where we are notified by swatch
            controls that they have had a mouseOut
            event-->
        <method name="notifySwatchMouseOut">
            <parameter name="swatchControl" />
            <parameter name="event" />
            <body><![CDATA[
                var paletteControl = this;
                paletteControl.resetAnimation = true;

                //The following resets the animation state.
                //However, notifySwatchMouseOut (this method)gets
                //called even when moving from selected swatch to
                //selected swatch.
                //When that is the case, we don't really want to
                //reset the animation state. Instead, we want to allow
                //an animation to finish, or let it stay in the finished
                //state. Therefore, after a brief delay, we check to see
                //if the paletteControl.resetAnimation is _still_ true,
                //meaning the cursor has really left the selected swatches,
                //and not entered another selected swatch.
                //If that's the case, we'll reset all the classes, and
                //set everything back how it was before all this animation
                //business
                setTimeout(
                    function(){
                        if(paletteControl.resetAnimation){
                            paletteControl.removeClass("selectedHover0");
                            paletteControl.removeClass("selectedHover1");
                            paletteControl.removeClass("selectedHover2");
                            paletteControl.removeClass("selectedHover3");
                            paletteControl.removeClass("selectedHover4");
                            paletteControl.removeClass("selectedHover");
                            paletteControl.finishedAnimation = false;
                        }
                    },
                    50
                );
            ]]>
            </body>
        </method>

    </implementation>

    <handlers>
        <handler event="mousedown" button="0" modifiers="none"><![CDATA[
            //Mouse down on a blank area of the palette control
            //deselects everything
            this.palette.deselectAllSwatches();
            event.stopPropagation();
        ]]>
        </handler>

        <!-- When a swatch has focus and the user presses Ctrl-C, we
             copy the color value of the swatch onto the system
             clipboard.  We implement this behavior in the palette
             instead of directly on swatches so that we have access to
             the most recently selected swatch, since if the user has
             selected multiple swatches we do not want to copy them
             all.  (Or do we?  ☃ wants to know.)
        -->
        <handler event="keypress" key="c" modifiers="control">
          <![CDATA[
                   this.palette.mostRecentlySelectedSwatch.copyColorToClipboard();
          ]]>
        </handler>

        <!-- When one or more swatches have focus and the user presses
             Ctrl-V, we try to copy a color from the clipboard and
             paste it into all of the selected swatches, which is to
             say we set those swatches to use that color.
        -->
        <handler event="keypress" key="v" modifiers="control">
          <![CDATA[
                   this.palette.selectedSwatches.forEach(
                       function (swatch) {
                           swatch.pasteColorFromClipboard();
                       }
                   );
          ]]>
        </handler>

        <handler event="keypress"><![CDATA[
            //Move a single-swatch selection around
            //with the arrow keys
            if(this.palette.selectionSize() == 1){
                switch(event.keyCode){
                    case 37:
                        this.moveSingleSelection(0,-1);
                        break;
                    case 38:
                        this.moveSingleSelection(-1,0);
                        break;
                    case 39:
                        this.moveSingleSelection(0,1);
                        break;
                    case 40:
                        this.moveSingleSelection(1,0);
                        break;
                }
            }
        ]]>
        </handler>
    </handlers>
</binding>

<binding id="toolBox">
    <content>
        <xul:hbox
            anonid="container">
            <xul:colorPickerPlus
                anonid="colorPickerPlus"/>
        </xul:hbox>
    </content>

    <implementation>
        <constructor><![CDATA[
            //Parent element for the whole control
            this.container =
                document.getAnonymousElementByAttribute(
                    this,
                    "anonid",
                    "container"
                );
            this.colorPickerPlus =
                document.getAnonymousElementByAttribute(
                    this,
                    "anonid",
                    "colorPickerPlus"
                );

            this.setPalette(this.originalPalette);

            this.originalPalette.addSelectionObserver(this);

            /**
             * Register this tool pane to get updates
             * from the color picker
             */
            if (!this.colorPickerPlus.originalDragObservers){
                this.colorPickerPlus.originalDragObservers = [];
            }
            this.colorPickerPlus.originalDragObservers.push(this);

            if (!this.colorPickerPlus.originalSelectObservers){
                this.colorPickerPlus.originalSelectObservers = [];
            }
            this.colorPickerPlus.originalSelectObservers.push(this);

        ]]></constructor>

        <method name="setPalette">
            <parameter name="palette"/>
            <body><![CDATA[
                this.palette = palette;
            ]]></body>
        </method>

        <method name="updatePickerDrag">
            <parameter name="picker"/>
            <body><![CDATA[
                var newColor = "rgb(" + picker.getRGB().join(",") + ")";
                var swatches = this.palette.getSelectedSwatches();

                Array.forEach(swatches, function(swatch) {
                    swatch.setLiveEditColor(newColor);
                });
            ]]></body>
        </method>

        <method name="updatePickerSelect">
            <parameter name="picker"/>
            <body><![CDATA[
                var newColor = "rgb(" + picker.getRGB().join(",") + ")";
                var swatches = this.palette.getSelectedSwatches();

                Array.forEach(swatches, function(swatch) {
                    swatch.setColor(newColor);
                });
            ]]></body>
        </method>

        <!--Get notified that the actual palette's selection
            set has changed-->
        <method name="updatePaletteSelection">
            <parameter name="palette"/>
            <body><![CDATA[
                if(palette.selectionSize() > 0){
                    var swatch = palette.mostRecentlySelectedSwatch;
                    var HSV = swatch.color.getHSV();
                    this.colorPickerPlus.setHSV(
                        HSV[0],
                        HSV[1],
                        HSV[2]);
                }
            ]]></body>
        </method>

    </implementation>

    <handlers>
        <handler event="mousedown" button="0" modifiers="none"><![CDATA[
            event.stopPropagation();
        ]]>
        </handler>
    </handlers>
</binding>
</bindings>