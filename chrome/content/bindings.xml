<?xml version="1.0"?>
<bindings
  xmlns="http://www.mozilla.org/xbl"
  xmlns:xbl="http://www.mozilla.org/xbl"
     xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
>
  

<binding id="swatchControl">
    <content>
        <xul:hbox
            anonid="container">
            <xul:box
                align="center"
                pack="center"
                anonid="selectionBox"
                class="swatchSelectionBox"
                orient="vertical">
                <xul:box
                    anonid="newColor"
                    class="colorSwatch">
                </xul:box>
            </xul:box>
        </xul:hbox>
    </content>

    <implementation>
        <constructor><![CDATA[
            //Parent element for the whole control
            this.newColorBox = document.getAnonymousElementByAttribute(this, "anonid", "newColor");
            this.selectionBox = document.getAnonymousElementByAttribute(this, "anonid", "selectionBox");
            
            //Relate the parent swatch control to each
            //element in a way that doesn't depend
            //on traversing the DOM
            this.newColorBox.swatchControl = this;

            this.setSwatch(this.originalSwatch);
        ]]></constructor>
        <method name="setSwatch">
            <parameter name="swatch"/>
            <body><![CDATA[
                //Unregister from any previous swatch
                if(this.swatch){
                    this.swatch.removeLiveColorObserver(this);
                    this.swatch.removeHistoryObserver(this);
                    this.swatch.removeSelectionObserver(this);
                }
                
                this.swatch = swatch;
                
                //Register with the new swatch
                this.swatch.addLiveColorObserver(this);
                this.swatch.addHistoryObserver(this);
                this.swatch.addSelectionObserver(this);
                
                var toolTip = "Found in " + swatch.count() + " style rule"
                        + (swatch.count()==1?"":"s");
                this.setAttribute("tooltiptext", toolTip);
                
                
                //Set up the modified swatch color box
                this.newColorBox.setAttribute(
                    "style",
                    "background-color: " + swatch.color.getCSSHex());
                
                //Set up the input box
                this.updateControl();
            ]]></body>
        </method>

        <method name="updateControl">
            <body><![CDATA[
                if (!this.swatch || !this.swatch.color){
                    return null;
                }
                
                this.updateColor(this.swatch.color)
            ]]>
            </body>
        </method>
        
        <method name="updateText">
            <body><![CDATA[
                if (!this.swatch || !this.swatch.color){
                    return null;
                }
            ]]>
            </body>
        </method>
        
        <method name="updateColor">
            <parameter name="color"/>
            <body><![CDATA[
                //The new color is different from the original color
                //Make the swatch the new background color
                this.newColorBox.setAttribute(
                    "style",
                    "background-color: " + color.getCSSHex());
            
            ]]>
            </body>
        </method>
        
        <method name="updateLiveColor">
            <parameter name="swatch"/>
            <body><![CDATA[
                this.updateColor(swatch.liveEditColor);
            ]]>
            </body>
        </method>
        
        <method name="updateSwatchHistory">
            <parameter name="swatch"/>
            <body><![CDATA[
                this.updateColor(swatch.color);
            ]]>
            </body>
        </method>
        <method name="updateSelection">
            <parameter name="swatch"/>
            <body><![CDATA[
                if(swatch.isSelected()){
                    this.selectionBox.addClass("selected");
                }
                else{
                    this.selectionBox.removeClass("selected");
                }
            ]]>
            </body>
        </method>
        
    </implementation>

    <handlers>
        <handler event="mousedown" button="0" modifiers="none"><![CDATA[
            swatch.palette.deselectAllSwatches();
            swatch.select();
            event.stopPropagation();
        ]]>
        </handler>
        <handler event="mousedown" button="0" modifiers="accel"><![CDATA[
            swatch.reverseSelection();
            event.stopPropagation();
        ]]>
        </handler>
        <handler event="mousedown" button="0" modifiers="shift"><![CDATA[
            var startSwatch = swatch.palette.mostRecentlySelectedSwatch;
            if(startSwatch && startSwatch.isSelected()){
                swatch.palette.selectSwatchRange(startSwatch, swatch);
            }
            else{
                swatch.reverseSelection();
            }
            event.stopPropagation();
        ]]>
        </handler>
        
        
        mostRecentlySelectedSwatch
    </handlers>
</binding>

</bindings>